// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid           String         @id @default(cuid())
  email         String         @db.VarChar(255)
  username      String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  role          Role           @relation(fields: [roleId], references: [id])
  roleId        Int
  refferalNum   String         @unique
  useReffReg    Boolean        @default(false)
  pointsBalance Int
  event         Event[]
  reviewRating  ReviewRating[]
  promotion     Promotion[]
  transaction   Transaction[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}

enum EventType {
  paid
  free
}

enum RoleUser {
  participant
  eventOrganizer
}

model Event {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  image        String         @db.VarChar(255)
  startDate    DateTime       @db.Date
  endDate      DateTime       @db.Date
  time         DateTime       @db.Time()
  location     Location       @relation(fields: [locationId], references: [id])
  locationId   Int            @unique
  description  String
  eventType    EventType      @default(paid)
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int
  user         User           @relation(fields: [userId], references: [uid])
  userId       String
  reviewRating ReviewRating[]
  promotion    Promotion[]
  ticket       Ticket[]
  transaction  Transaction[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
}

model Location {
  id        Int      @id @default(autoincrement())
  city      String   @db.VarChar(255)
  address   String   @db.VarChar(255)
  region    String   @db.VarChar(255)
  event     Event?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        Int       @id @default(autoincrement())
  role      RoleUser
  user      User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ReviewRating {
  id        Int       @id @default(autoincrement())
  rating    Int
  review    String    @db.VarChar(255)
  user      User      @relation(fields: [userId], references: [uid])
  userId    String
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum CategoryEvent {
  Hiburan
  Musik
  Edukasi
}

model Category {
  id        Int           @id @default(autoincrement())
  name      CategoryEvent
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  event     Event[]
}

model Promotion {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  discount  Float
  startDate DateTime  @db.Date
  endDate   DateTime  @db.Date
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User      @relation(fields: [userId], references: [uid])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Transaction{
  id Int @id @default(autoincrement())
  event Event @relation(fields: [eventId], references: [id])
  eventId Int
  user User @relation(fields: [userId], references: [uid])
  userId String
  qty Int
  totalPrice Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model TicketType{
  id Int @id @default(autoincrement())
  name String
  ticket Ticket @relation(fields: [ticketId], references: [id])
  ticketId Int @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Ticket {
  id            Int       @id @default(autoincrement())
  ticketType    TicketType? 
  price         Int
  availableSeat Boolean   @default(true)
  qty           Int
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}
