// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid            String            @id @default(cuid())
  email          String            @db.VarChar(255)
  username       String            @unique @db.VarChar(255)
  password       String            @db.VarChar(255)
  role           Role              @relation(fields: [roleId], references: [id])
  roleId         Int
  inputRef       String?
  referralNum    String            @unique
  pointsBalance  Int               @default(0)
  event          Event[]
  reviewRating   ReviewRating[]
  promotion      Promotion[]
  transaction    Transaction[]
  points         Points[]
  discontVoucher DiscountVoucher[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
}

enum EventType {
  paid
  free
}

enum RoleUser {
  participant
  eventOrganizer
}

model Event {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(255)
  eventOrganizer String
  startDate      DateTime       @db.Date
  endDate        DateTime       @db.Date
  startTime      DateTime       @db.Time()
  endTime        DateTime       @db.Time()
  city           String
  address        String
  description    String
  availableSeat  Int
  price          Int
  eventType      EventType      @default(paid)
  category       Category       @relation(fields: [categoryId], references: [id])
  categoryId     Int
  image          Image[]
  user           User[]
  reviewRating   ReviewRating[]
  promotion      Promotion[]
  transaction    Transaction[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

model Image {
  id        Int       @id @default(autoincrement())
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
}

model Role {
  id        Int       @id @default(autoincrement())
  role      RoleUser
  user      User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ReviewRating {
  id        Int       @id @default(autoincrement())
  rating    Int
  review    String    @db.VarChar(255)
  user      User      @relation(fields: [userId], references: [uid])
  userId    String
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum CategoryEvent {
  Hiburan
  Musik
  Edukasi
}

model Category {
  id        Int           @id @default(autoincrement())
  name      CategoryEvent
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  event     Event[]
}

model Promotion {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  discount  Float
  startDate DateTime  @db.Date
  endDate   DateTime  @db.Date
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User      @relation(fields: [userId], references: [uid])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Transaction {
  id         Int       @id @default(autoincrement())
  event      Event     @relation(fields: [eventId], references: [id])
  eventId    Int
  user       User      @relation(fields: [userId], references: [uid])
  userId     String
  qty        Int
  totalPrice Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model TicketType {
  id        Int       @id @default(autoincrement())
  name      String
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
  ticketId  Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Ticket {
  id            Int         @id @default(autoincrement())
  ticketType    TicketType?
  price         Int
  availableSeat Boolean     @default(true)
  qty           Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
}

model Points {
  id          Int      @id @default(autoincrement())
  balance     Int
  user        User     @relation(fields: [userId], references: [uid])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiredDate DateTime @db.DateTime()
  isUsed      Boolean  @default(false)
}

model DiscountVoucher {
  id          Int      @id @default(autoincrement())
  value       Float
  user        User     @relation(fields: [userId], references: [uid])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiredDate DateTime @db.DateTime()
  isUsed      Boolean  @default(false)
}
